// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;
import {Ownable} from "openzeppelin-contracts/contracts/Access/Ownable.sol";
import {ERC20} from "openzeppelin-contracts/contracts/token/ERC20/ERC20.sol";
import {IERC20} from "openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";
import {SecureMe} from "./SecureMe.sol";

contract FlashLoanRecipient {

    address secureMe;

    constructor (address lender) {
        secureMe = lender;
    }

    function receiveFlashLoan(uint256 amount) external {
        // Simply bay the SMTK back to the loan contract
        // But verify that it is the caller
        require(msg.sender == secureMe, "FlashLoanRecipient: Unrecognized Caller");
        // Approve the lender 
        // Why is EOA paying th etokens?  
        require(SecureMe(secureMe).transfer(msg.sender, amount), "FlashLoanRecipient: Repayment Failed");
        // Allow lender to take back loan
        //require(SecureMe(secureMe).transferFrom(address(this), msg.sender, amount), "FlashLoanRecipient: Repayment failed");
        
    }

}